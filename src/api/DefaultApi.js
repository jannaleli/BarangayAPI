/**
 * BarangayAPI
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2019-07-14T05:55:41Z
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.7
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/BarangayAttachmentModel', 'model/BarangayComplaintArray', 'model/BarangayComplaintModel', 'model/BarangayDocumentArray', 'model/BarangayDocumentModel', 'model/BarangayEventArray', 'model/BarangayEventModel', 'model/BarangayPermitArray', 'model/BarangayPermitModel', 'model/BarangayUserArray', 'model/BarangayUserModel', 'model/Empty'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/BarangayAttachmentModel'), require('../model/BarangayComplaintArray'), require('../model/BarangayComplaintModel'), require('../model/BarangayDocumentArray'), require('../model/BarangayDocumentModel'), require('../model/BarangayEventArray'), require('../model/BarangayEventModel'), require('../model/BarangayPermitArray'), require('../model/BarangayPermitModel'), require('../model/BarangayUserArray'), require('../model/BarangayUserModel'), require('../model/Empty'));
  } else {
    // Browser globals (root is window)
    if (!root.BarangayApi) {
      root.BarangayApi = {};
    }
    root.BarangayApi.DefaultApi = factory(root.BarangayApi.ApiClient, root.BarangayApi.BarangayAttachmentModel, root.BarangayApi.BarangayComplaintArray, root.BarangayApi.BarangayComplaintModel, root.BarangayApi.BarangayDocumentArray, root.BarangayApi.BarangayDocumentModel, root.BarangayApi.BarangayEventArray, root.BarangayApi.BarangayEventModel, root.BarangayApi.BarangayPermitArray, root.BarangayApi.BarangayPermitModel, root.BarangayApi.BarangayUserArray, root.BarangayApi.BarangayUserModel, root.BarangayApi.Empty);
  }
}(this, function(ApiClient, BarangayAttachmentModel, BarangayComplaintArray, BarangayComplaintModel, BarangayDocumentArray, BarangayDocumentModel, BarangayEventArray, BarangayEventModel, BarangayPermitArray, BarangayPermitModel, BarangayUserArray, BarangayUserModel, Empty) {
  'use strict';

  /**
   * Default service.
   * @module api/DefaultApi
   * @version 2019-07-14T05:55:41Z
   */

  /**
   * Constructs a new DefaultApi. 
   * @alias module:api/DefaultApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the attachmentAttachmentIdGet operation.
     * @callback module:api/DefaultApi~attachmentAttachmentIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BarangayAttachmentModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} attachmentId 
     * @param {module:api/DefaultApi~attachmentAttachmentIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BarangayAttachmentModel}
     */
    this.attachmentAttachmentIdGet = function(attachmentId, callback) {
      var postBody = null;

      // verify the required parameter 'attachmentId' is set
      if (attachmentId === undefined || attachmentId === null) {
        throw new Error("Missing the required parameter 'attachmentId' when calling attachmentAttachmentIdGet");
      }


      var pathParams = {
        'attachment_id': attachmentId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BarangayAttachmentModel;

      return this.apiClient.callApi(
        '/attachment/{attachment_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the attachmentPost operation.
     * @callback module:api/DefaultApi~attachmentPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/BarangayAttachmentModel} barangayAttachmentModel 
     * @param {module:api/DefaultApi~attachmentPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.attachmentPost = function(barangayAttachmentModel, callback) {
      var postBody = barangayAttachmentModel;

      // verify the required parameter 'barangayAttachmentModel' is set
      if (barangayAttachmentModel === undefined || barangayAttachmentModel === null) {
        throw new Error("Missing the required parameter 'barangayAttachmentModel' when calling attachmentPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/attachment', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the complaintComplaintIdGet operation.
     * @callback module:api/DefaultApi~complaintComplaintIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Empty} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} complaintId 
     * @param {module:api/DefaultApi~complaintComplaintIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Empty}
     */
    this.complaintComplaintIdGet = function(complaintId, callback) {
      var postBody = null;

      // verify the required parameter 'complaintId' is set
      if (complaintId === undefined || complaintId === null) {
        throw new Error("Missing the required parameter 'complaintId' when calling complaintComplaintIdGet");
      }


      var pathParams = {
        'complaint_id': complaintId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Empty;

      return this.apiClient.callApi(
        '/complaint/{complaint_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the complaintGet operation.
     * @callback module:api/DefaultApi~complaintGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BarangayComplaintArray} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~complaintGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BarangayComplaintArray}
     */
    this.complaintGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BarangayComplaintArray;

      return this.apiClient.callApi(
        '/complaint', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the complaintPost operation.
     * @callback module:api/DefaultApi~complaintPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/BarangayComplaintModel} barangayComplaintModel 
     * @param {module:api/DefaultApi~complaintPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.complaintPost = function(barangayComplaintModel, callback) {
      var postBody = barangayComplaintModel;

      // verify the required parameter 'barangayComplaintModel' is set
      if (barangayComplaintModel === undefined || barangayComplaintModel === null) {
        throw new Error("Missing the required parameter 'barangayComplaintModel' when calling complaintPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/complaint', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the documentGet operation.
     * @callback module:api/DefaultApi~documentGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BarangayDocumentArray} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~documentGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BarangayDocumentArray}
     */
    this.documentGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BarangayDocumentArray;

      return this.apiClient.callApi(
        '/document', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the documentPost operation.
     * @callback module:api/DefaultApi~documentPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/BarangayDocumentModel} barangayDocumentModel 
     * @param {module:api/DefaultApi~documentPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.documentPost = function(barangayDocumentModel, callback) {
      var postBody = barangayDocumentModel;

      // verify the required parameter 'barangayDocumentModel' is set
      if (barangayDocumentModel === undefined || barangayDocumentModel === null) {
        throw new Error("Missing the required parameter 'barangayDocumentModel' when calling documentPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/document', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the documentUserIdGet operation.
     * @callback module:api/DefaultApi~documentUserIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BarangayDocumentModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} userId 
     * @param {module:api/DefaultApi~documentUserIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BarangayDocumentModel}
     */
    this.documentUserIdGet = function(userId, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling documentUserIdGet");
      }


      var pathParams = {
        'user_id': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BarangayDocumentModel;

      return this.apiClient.callApi(
        '/document/{user_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the eventGet operation.
     * @callback module:api/DefaultApi~eventGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BarangayEventArray} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~eventGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BarangayEventArray}
     */
    this.eventGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BarangayEventArray;

      return this.apiClient.callApi(
        '/event', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the eventPost operation.
     * @callback module:api/DefaultApi~eventPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/BarangayEventModel} barangayEventModel 
     * @param {module:api/DefaultApi~eventPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.eventPost = function(barangayEventModel, callback) {
      var postBody = barangayEventModel;

      // verify the required parameter 'barangayEventModel' is set
      if (barangayEventModel === undefined || barangayEventModel === null) {
        throw new Error("Missing the required parameter 'barangayEventModel' when calling eventPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/event', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the permitGet operation.
     * @callback module:api/DefaultApi~permitGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BarangayPermitArray} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~permitGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BarangayPermitArray}
     */
    this.permitGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BarangayPermitArray;

      return this.apiClient.callApi(
        '/permit', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the permitPost operation.
     * @callback module:api/DefaultApi~permitPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Empty} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~permitPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Empty}
     */
    this.permitPost = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Empty;

      return this.apiClient.callApi(
        '/permit', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the permitUserIdGet operation.
     * @callback module:api/DefaultApi~permitUserIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BarangayPermitModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} userId 
     * @param {module:api/DefaultApi~permitUserIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BarangayPermitModel}
     */
    this.permitUserIdGet = function(userId, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling permitUserIdGet");
      }


      var pathParams = {
        'user_id': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BarangayPermitModel;

      return this.apiClient.callApi(
        '/permit/{user_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userGet operation.
     * @callback module:api/DefaultApi~userGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BarangayUserArray} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~userGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BarangayUserArray}
     */
    this.userGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BarangayUserArray;

      return this.apiClient.callApi(
        '/user', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userPost operation.
     * @callback module:api/DefaultApi~userPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Empty} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/BarangayUserModel} barangayUserModel 
     * @param {module:api/DefaultApi~userPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Empty}
     */
    this.userPost = function(barangayUserModel, callback) {
      var postBody = barangayUserModel;

      // verify the required parameter 'barangayUserModel' is set
      if (barangayUserModel === undefined || barangayUserModel === null) {
        throw new Error("Missing the required parameter 'barangayUserModel' when calling userPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Empty;

      return this.apiClient.callApi(
        '/user', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userUserIdGet operation.
     * @callback module:api/DefaultApi~userUserIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BarangayUserModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} userId 
     * @param {module:api/DefaultApi~userUserIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BarangayUserModel}
     */
    this.userUserIdGet = function(userId, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling userUserIdGet");
      }


      var pathParams = {
        'user_id': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BarangayUserModel;

      return this.apiClient.callApi(
        '/user/{user_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
